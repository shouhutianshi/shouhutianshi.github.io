<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[(mongodb安装注意事项)]]></title>
      <url>http://yoursite.com/2016/12/27/mongodb%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h4 id="在安装mongodb时，我们一般需要开了两个窗口，一个是服务器端，一个是客户端，略显麻烦。我们可以将命令添加到windows服务器上，还可以添加环境变量。"><a href="#在安装mongodb时，我们一般需要开了两个窗口，一个是服务器端，一个是客户端，略显麻烦。我们可以将命令添加到windows服务器上，还可以添加环境变量。" class="headerlink" title="在安装mongodb时，我们一般需要开了两个窗口，一个是服务器端，一个是客户端，略显麻烦。我们可以将命令添加到windows服务器上，还可以添加环境变量。"></a>在安装<code>mongodb</code>时，我们一般需要开了两个窗口，一个是服务器端，一个是客户端，略显麻烦。我们可以将命令添加到windows服务器上，还可以添加环境变量。</h4><a id="more"></a>
<h5 id="安装mongodb一般分为以下几个步骤："><a href="#安装mongodb一般分为以下几个步骤：" class="headerlink" title="安装mongodb一般分为以下几个步骤："></a>安装<code>mongodb</code>一般分为以下几个步骤：</h5><ol>
<li>进入<code>www.mongo.org</code>下载匹配的安装包；</li>
<li>软件安装和普通<code>.exe</code>安装差不多，中间我选择的是<code>custom</code>，这样就可以把数据库安装在<code>d</code>盘，我的路径是<code>D:\mongodb\</code>;</li>
<li>在<code>D:\mongodb\</code>中，新建两个文件夹，分别是<code>data</code> <code>logs</code>，一个是存放数据，一个存放日志；</li>
<li>打开<code>cmd</code>，切换到<code>d:\mongodb\bin\</code>，输入<code>mongod --dbpath &quot;D:\mongodb\data&quot; --logpath &quot;D:\mongodb\logs\mongo.log&quot; --install --serviceName &quot;mongodb&quot;</code>，就可以绑定数据文件夹和日志文件夹了，并且还绑定了<code>windows</code>服务。可以使用<code>net start mongodb</code>和<code>net stop mongodb</code>;</li>
<li>当然，我们在环境变量中添加<code>D:\mongodb\;</code>和<code>D:\mongodb\bin;</code>这样就可以全局使用<code>mongod</code>和<code>mongo.exe</code>了。<br><strong>  一般出现问题的原因是没有用管理员权限打开 cmd </strong></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(meta头之缓存部分)]]></title>
      <url>http://yoursite.com/2016/12/22/meta%E5%A4%B4%E4%B9%8B%E7%BC%93%E5%AD%98%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h4 id="每次更新了网页都不能立即看到效果，于是查了下网页头如何设置缓存，现整理如下："><a href="#每次更新了网页都不能立即看到效果，于是查了下网页头如何设置缓存，现整理如下：" class="headerlink" title="每次更新了网页都不能立即看到效果，于是查了下网页头如何设置缓存，现整理如下："></a>每次更新了网页都不能立即看到效果，于是查了下网页头如何设置缓存，现整理如下：</h4><a id="more"></a>
<h5 id="lt-meta-http-equiv-quot-pragma-quot-content-quot-no-cache-quot-gt"><a href="#lt-meta-http-equiv-quot-pragma-quot-content-quot-no-cache-quot-gt" class="headerlink" title="&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;"></a><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</code></h5><p><code>pragma</code>与<code>no-cache</code>用于定义页面缓存。不缓存页面，这样浏览器就无法脱机浏览了。</p>
<h5 id="lt-meta-http-equiv-quot-cache-control-quot-content-quot-quot-gt"><a href="#lt-meta-http-equiv-quot-cache-control-quot-content-quot-quot-gt" class="headerlink" title="&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;&quot;&gt;"></a><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;&quot;&gt;</code></h5><p><code>content</code>常见的取值有<code>private</code>、<code>no-cache</code>、<code>max-age</code>、<code>must-revalidate</code><br>等，默认为<code>private</code>，其作用根据不同的重新浏览方式分为以下几种情况：</p>
<ol>
<li>值为<code>private</code>、<code>no-cache</code>、<code>must-revalidate</code>时，打开新窗口都会重新访问服务器。而如果指定了<code>max-age</code>，那么在此值内的时间里就不会重新访问服务器。例如：<code>cache-control:max-age=5</code>，此时访问此网页的<code>5s</code>内浏览器不会重新访问服务器。</li>
<li>在地址栏回车时，值为<code>private</code>、<code>must-revalidate</code>只有在第一次访问时会访问服务器，以后不在访问。值为<code>no-cache</code>时，每次都访问。<br>值为<code>max-age</code>时，则在过期之前不会重复访问。</li>
<li>按后退按钮时，值为<code>private</code>、<code>must-revalidate</code>、<code>max-age</code>时，不会重新访问服务器，值为<code>no-cache</code>时，则每次都会重复访问服务器。</li>
<li>按刷新按钮，都会重复访问。而值为<code>no-cache</code>时，访问此页年不会在Internet临时文件夹留下页面备份。<h5 id="expires"><a href="#expires" class="headerlink" title="expires"></a><code>expires</code></h5></li>
</ol>
<ul>
<li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code>,指定<code>Expires</code>值为一个早已过去的时间，此时访问访问网站，若在地址栏按回车，那么每次都会重复访问。<code>content</code>里面是一个时间，比如”Wed Dec 21 2016 17:21:39 GMT+0800 (中国标准时间)”。</li>
</ul>
<p>未完待续……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(闭包问题的一点认识)]]></title>
      <url>http://yoursite.com/2016/12/22/%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E7%82%B9%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<h4 id="今天在做一个页面时，里面有多个倒计时器。期间因为要用到for循环，而且要保持状态，不小心陷入了闭包概念中。当时测试了好一会儿也没搞明白怎么回事儿，回来翻看《高级程序设计》和《JavaScript面向对象编程指南》关于闭包的章节，细读了一会儿，应该在我现阶段算是彻底了明白了什么叫闭包（不知道后面程序写的更长闭包会是什么样子的，至少我现在的工作还没有碰到！）。"><a href="#今天在做一个页面时，里面有多个倒计时器。期间因为要用到for循环，而且要保持状态，不小心陷入了闭包概念中。当时测试了好一会儿也没搞明白怎么回事儿，回来翻看《高级程序设计》和《JavaScript面向对象编程指南》关于闭包的章节，细读了一会儿，应该在我现阶段算是彻底了明白了什么叫闭包（不知道后面程序写的更长闭包会是什么样子的，至少我现在的工作还没有碰到！）。" class="headerlink" title="今天在做一个页面时，里面有多个倒计时器。期间因为要用到for循环，而且要保持状态，不小心陷入了闭包概念中。当时测试了好一会儿也没搞明白怎么回事儿，回来翻看《高级程序设计》和《JavaScript面向对象编程指南》关于闭包的章节，细读了一会儿，应该在我现阶段算是彻底了明白了什么叫闭包（不知道后面程序写的更长闭包会是什么样子的，至少我现在的工作还没有碰到！）。"></a>今天在做一个页面时，里面有多个倒计时器。期间因为要用到<code>for</code>循环，而且要保持状态，不小心陷入了闭包概念中。当时测试了好一会儿也没搞明白怎么回事儿，回来翻看《高级程序设计》和《JavaScript面向对象编程指南》关于闭包的章节，细读了一会儿，应该在我现阶段算是彻底了明白了什么叫闭包（不知道后面程序写的更长闭包会是什么样子的，至少我现在的工作还没有碰到！）。</h4><a id="more"></a>
<p>先是翻看廖雪峰的关于关于<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000" target="_blank" rel="external">JavaScript</a>的教程，里面有一句话：<strong> 返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong><br>接下来在《高级程序设计》中看到这样的一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createFunctions() &#123;</div><div class="line">    var result = new Array();</div><div class="line"></div><div class="line">    for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">        result[i] = function(num) &#123;</div><div class="line">            return function() &#123;</div><div class="line">                return num;</div><div class="line">            &#125;</div><div class="line">        &#125;(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以这样调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = createFunctions();</div><div class="line">var f1 = arr[0];</div><div class="line">var f2 = arr[1];</div><div class="line">var f3 = arr[2];</div><div class="line">...</div><div class="line"></div><div class="line">f1() //1</div><div class="line">f2() //2</div><div class="line">f3() //3</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>明确一点：闭包就是：<strong> 有权访问另外一个函数作用域的函数。一般都是内部函数访问外部函数作用域 </strong></p>
<p>虽然明确了这一点，但是在前面说到的多个倒计时器的例子中，我并没有用到闭包，而是用的创建实例。这又让我感觉到面向对象编程的概念陌生了，还是要多练呀。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(一点心得笔记)]]></title>
      <url>http://yoursite.com/2016/12/08/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="这几天做专题的时候，遇到很多问题。做个笔记加深印象。"><a href="#这几天做专题的时候，遇到很多问题。做个笔记加深印象。" class="headerlink" title="这几天做专题的时候，遇到很多问题。做个笔记加深印象。"></a>这几天做专题的时候，遇到很多问题。做个笔记加深印象。</h4><a id="more"></a>
<ol>
<li>在火狐和chrome中，取卷积的高度时，两者有明显的区别。<ul>
<li>FF中<code>document.documentElement.scollTop</code>取得，它要从根元素获取；</li>
<li>chrome中<code>document.body.scrollTop</code>取得，它要从<code>body</code>元素上获取。</li>
</ul>
</li>
<li>写判断时，一定要选好边界；</li>
<li>DOM中，<code>setAtrribute</code>可以同时设置多个属性，如果是同一个属性就覆盖掉。当然，由于现在前端技术的发展，MVVM框架的发展，最后利用数据驱动，不要直接操纵DOM。</li>
<li>我发现<code>keyframes</code>动画有的在chrome上运行良好，但是在FF中运行不了，google和百度都发现了类似问题。这个问题我还没有解决，一方面英文看的有点吃力，一方面，昨晚喝了点酒，头晕晕的，实在不想看了。</li>
</ol>
<p><strong><em> 就写这么多吧  </em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(webpack学习小结)]]></title>
      <url>http://yoursite.com/2016/11/28/webpack%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="最近在学习vue-js，里面既涉及到babel、es6、webpack、node-js、还有route，这些东西除了node-js对我来说不算新鲜，其他的接触的特别少，其他的都是第一次接触。既然想把vue-js学好，必须得一个个击破。先从webpack开始"><a href="#最近在学习vue-js，里面既涉及到babel、es6、webpack、node-js、还有route，这些东西除了node-js对我来说不算新鲜，其他的接触的特别少，其他的都是第一次接触。既然想把vue-js学好，必须得一个个击破。先从webpack开始" class="headerlink" title="最近在学习vue.js，里面既涉及到babel、es6、webpack、node.js、还有route，这些东西除了node.js对我来说不算新鲜，其他的接触的特别少，其他的都是第一次接触。既然想把vue.js学好，必须得一个个击破。先从webpack开始~"></a>最近在学习<code>vue.js</code>，里面既涉及到<code>babel</code>、<code>es6</code>、<code>webpack</code>、<code>node.js</code>、还有<code>route</code>，这些东西除了<code>node.js</code>对我来说不算新鲜，其他的接触的特别少，其他的都是第一次接触。既然想把<code>vue.js</code>学好，必须得一个个击破。先从<code>webpack</code>开始~</h4><a id="more"></a>
<h5 id="两个最基本的命令"><a href="#两个最基本的命令" class="headerlink" title="两个最基本的命令"></a>两个最基本的命令</h5><p><code>npm install -g webpack</code> 全局安装<br><code>npm install --save-dev webpack</code> 安装到所在项目中的目录</p>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>项目开始前，<code>npm init</code>初始化，在文件夹中会产生一个<code>package.json</code>。一般如果项目并不发布的话，终端的一些提示信息可以忽略，一路安装到底。</p>
<ol>
<li><p><code>package.json</code>生成以后，在本项目中安装<code>webpack</code>作为依赖包注入。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure>
</li>
<li><p>一般我们会在项目中新建两个文件夹。这里暂时命令为<code>app</code>、<code>public</code>，<code>app</code>文件夹作为存放原始数据文件夹，一般我们会放入<code>index.html</code>、<code>js</code>、<code>css</code>或者还可以有<code>img</code>，由于<code>webpack</code>不擅长处理图片，一般在这里我们放入需要压缩的图片,在<code>app</code>中新建<code>main.js</code>作为入口文件。而<code>public</code>文件夹中作为接收<code>webpack</code>处理过后的文件。</p>
</li>
</ol>
<h5 id="修改webpack配置文件"><a href="#修改webpack配置文件" class="headerlink" title="修改webpack配置文件"></a>修改<code>webpack</code>配置文件</h5><p>我们在根目录下新建一个<code>js</code>文件作为<code>webpack</code>的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h5><ol>
<li><p>没有配置文件的情况下：</p>
<p> <code>webpack</code>的命令是<code>webpack {entry file/入口文件} {destination for bundle file/存放bundle.js的地方}</code><br>最好<code>webpack</code>进行全局安装，不然要执行命令<code>node_modules/.bin webpack {entry file/入口文件} {destination for bundle file/存放bundle.js的地方}</code></p>
</li>
<li><p>上面我们修改了配置文件，这样我们可以简化<code>webpack</code>命令<br> 只需执行<code>wepack</code>，没有进行全局安装的，要输入<code>node_module/.bin webpack</code></p>
</li>
</ol>
<h5 id="webpack生成Source-Maps"><a href="#webpack生成Source-Maps" class="headerlink" title="webpack生成Source Maps"></a><code>webpack</code>生成<code>Source Maps</code></h5><table>
<thead>
<tr>
<th>devtool选项</th>
<th>配置结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>source-map</td>
<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度</td>
</tr>
<tr>
<td>cheap-module-source-map</td>
<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便</td>
</tr>
<tr>
<td>eval-source-map</td>
<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项</td>
</tr>
<tr>
<td>cheap-module-eval-source-map</td>
<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点</td>
</tr>
</tbody>
</table>
<p>因此我们在中小型项目中，最后配置<code>eval-source-map</code>选项。配置文件在上面的基础上修改为：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h5 id="构建本地服务器"><a href="#构建本地服务器" class="headerlink" title="构建本地服务器"></a>构建本地服务器</h5><p>让浏览器监测本地文件的修改，并自动刷新浏览器。</p>
<ol>
<li>安装<code>npm install --save-dev wepack-dev-server</code>。它的配置项有四项：</li>
</ol>
<table>
<thead>
<tr>
<th>devserver配置选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>contentBase</td>
<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录</td>
</tr>
<tr>
<td>port</td>
<td>设置监听端口。如果省略，端口号为<code>8080</code></td>
</tr>
<tr>
<td>inline</td>
<td>设置为<code>true</code>，当源文件改变时，自动刷新页面</td>
</tr>
<tr>
<td>colors</td>
<td>设置为<code>true</code>，使终端输出的文件为彩色</td>
</tr>
<tr>
<td>historyApiFallback</td>
<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>
</tr>
</tbody>
</table>
<p>现在配置文件修改为：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  module.exports = &#123;</div><div class="line">  devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;,</div><div class="line">    devserver : &#123;</div><div class="line">      contentBase:　&quot;./public&quot;,</div><div class="line">      colors: true,</div><div class="line">      inline: true,</div><div class="line">      historyApiFallback: false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h5 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h5><p>通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。</p>
<ol>
<li><p>通过命令安装<code>npm install --save-dev json-loader</code>。修改配置文件为：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  module.exports = &#123;</div><div class="line">  devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;,</div><div class="line">    devserver : &#123;</div><div class="line">      contentBase:　&quot;./public&quot;,</div><div class="line">      colors: true,</div><div class="line">      inline: true,</div><div class="line">      historyApiFallback: false</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: &#123;</div><div class="line">            test: /\.json/,</div><div class="line">            loader: &quot;json&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>loaders</code>一般配置项有四个选项：</p>
<p> loader选项 |　功能说明<br> — | —<br> test | 一个匹配loaders所处理的文件的拓展名的正则表达式（必须）<br> loader | loader的名称<br> include/exclude |手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）<br> query | 为loaders提供额外的设置选项（可选）</p>
</li>
</ol>
<h6 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a><code>Babel</code></h6><p>它也是一个<code>loader</code>，作用是将<code>es6</code>转化为<code>es5</code>。安装命令为<code>npm install --save-dev babel-core babel-loader babel-preset-es2015</code>。配置项修改为</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  module.exports = &#123;</div><div class="line">  devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;,</div><div class="line">    devserver : &#123;</div><div class="line">      contentBase:　&quot;./public&quot;,</div><div class="line">      colors: true,</div><div class="line">      inline: true,</div><div class="line">      historyApiFallback: false</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123;</div><div class="line">                test: /\.json$/,</div><div class="line">                loader: &quot;json&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: &quot;/\.js$/&quot;,</div><div class="line">                loader: &quot;babel&quot;,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                query: [&apos;es2015&apos;]</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h5 id="CSS处理"><a href="#CSS处理" class="headerlink" title="CSS处理"></a>CSS处理</h5><p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>
<ol>
<li><p>通过<code>npm install --save-dev style-loader css-loader</code>命令安装。配置项修改为</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">  module.exports = &#123;</div><div class="line">  devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname + &quot;/public&quot;,</div><div class="line">        filename:　bundle.js</div><div class="line">    &#125;,</div><div class="line">    devserver : &#123;</div><div class="line">      contentBase:　&quot;./public&quot;,</div><div class="line">      colors: true,</div><div class="line">      inline: true,</div><div class="line">      historyApiFallback: false</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123;</div><div class="line">                test: /\.json$/,</div><div class="line">                loader: &quot;json&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: &quot;/\.js$/&quot;,</div><div class="line">                loader: &quot;babel&quot;,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                query: [&apos;es2015&apos;]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: /\.css$/,</div><div class="line">                loader: &quot;css!style&quot;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><em> 感叹号的作用在于使同一文件能够使用不同类型的loader    </em></strong></p>
<ol>
<li>我们在入口文件<code>main.js</code>中导入<code>style.css</code>文件，命令为<code>require(&#39;./style.css&#39;)</code></li>
</ol>
<h5 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h5><p>一般css预处理器有三个，分别为<code>Less loader</code>、<code>Sass loader</code>、<code>Stylus loader</code>。和上面一样，修改配置选项即可。<br>不过这里要安装另外一个css处理平台–<code>PostCSS</code>,它可以帮助你的css实现更多功能。</p>
<ol>
<li><p>安装。<code>npm install --save-dev postcss-loader autoporefixer</code>,修改配置：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    devtool: &quot;eval-source-map&quot;,</div><div class="line">    entry: __dirname + &quot;/app/main.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">      path: __dirname + &quot;/public&quot;,</div><div class="line">      filename:　bundle.js</div><div class="line">    &#125;,</div><div class="line">    devserver : &#123;</div><div class="line">        contentBase:　&quot;./public&quot;,</div><div class="line">        colors: true,</div><div class="line">        inline: true,</div><div class="line">        historyApiFallback: false</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">          loaders: [</div><div class="line">              &#123;</div><div class="line">                  test: /\.json$/,</div><div class="line">                  loader: &quot;json&quot;</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                  test: &quot;/\.js$/&quot;,</div><div class="line">                  loader: &quot;babel&quot;,</div><div class="line">                  exclude: /node_modules/,</div><div class="line">                  query: [&apos;es2015&apos;]</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                  test: /\.css$/,</div><div class="line">                  loader: &quot;css!style!postcss&quot;</div><div class="line">              &#125;,</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">         postcss: [</div><div class="line">             require(&apos;autoprefixer&apos;)</div><div class="line">        ]</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a><code>plugins</code></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(更改浏览器默认的滚动条样式)]]></title>
      <url>http://yoursite.com/2016/11/22/%E6%9B%B4%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="今天在做专题的时候意识到浏览器的默认滚动条有点丑陋，于是google了下能否更改的问题。不出意料，确实有这样的style，不过是某些浏览器的私有样式。我在这里贴出来，让自己长长记性。"><a href="#今天在做专题的时候意识到浏览器的默认滚动条有点丑陋，于是google了下能否更改的问题。不出意料，确实有这样的style，不过是某些浏览器的私有样式。我在这里贴出来，让自己长长记性。" class="headerlink" title="今天在做专题的时候意识到浏览器的默认滚动条有点丑陋，于是google了下能否更改的问题。不出意料，确实有这样的style，不过是某些浏览器的私有样式。我在这里贴出来，让自己长长记性。"></a>今天在做专题的时候意识到浏览器的默认滚动条有点丑陋，于是google了下能否更改的问题。不出意料，确实有这样的<code>style</code>，不过是某些浏览器的私有样式。我在这里贴出来，让自己长长记性。</h4><a id="more"></a>
<h5 id="滚动条的组成"><a href="#滚动条的组成" class="headerlink" title="滚动条的组成"></a>滚动条的组成</h5><ul>
<li><code>::-webkit-scrollbar</code> 滚动条的整体部分。</li>
<li><code>::-webkit-scrollbar-thumb</code> 滚动条里的小方块。</li>
<li><code>::-webkit-scrollbar-track</code> 滚动条里的轨道，小方块就在这里上下或者左右移动。</li>
<li><code>::-webkit-scrollbar-button</code>滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li>
<li><code>::-webkit-scrollbar-track-piece</code> 内层轨道,大概是除了两端按钮之外的轨道。</li>
<li><code>::-webkit-scrollbar-corner</code> 边角，即连个轨道的交汇处。</li>
<li><code>::-webkit-resizer</code> 两个滚动条交汇处上用于通过拖动调整元素大小的小控件。</li>
</ul>
<p>demo在此。<a href="http://of6mwl32w.bkt.clouddn.com/demo.html" target="_blank" rel="external">点我</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(本博客的hexo配置文件和next配置文件)]]></title>
      <url>http://yoursite.com/2016/11/15/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8Cnext%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><a href="http://of6mwl32w.bkt.clouddn.com/%28next%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%29_config.yml" target="_blank" rel="external">next配置文件</a><br><a href="http://of6mwl32w.bkt.clouddn.com/_config.yml" target="_blank" rel="external">hexo配置文件</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我经常用的ST3插件]]></title>
      <url>http://yoursite.com/2016/11/14/%E6%88%91%E7%BB%8F%E5%B8%B8%E7%94%A8%E7%9A%84ST3%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="平时用到的一些插件不算多，但数数也有十几个了。不做总结的话，估计换台电脑我又得重新找回来，这里对这些插件做一个总结。一方面清楚自己到底用了哪些插件，一方面也把插件的配置粘过来，总之，方便自己在任何地方、任何电脑上，也能够享受统一的插件服务。"><a href="#平时用到的一些插件不算多，但数数也有十几个了。不做总结的话，估计换台电脑我又得重新找回来，这里对这些插件做一个总结。一方面清楚自己到底用了哪些插件，一方面也把插件的配置粘过来，总之，方便自己在任何地方、任何电脑上，也能够享受统一的插件服务。" class="headerlink" title="平时用到的一些插件不算多，但数数也有十几个了。不做总结的话，估计换台电脑我又得重新找回来，这里对这些插件做一个总结。一方面清楚自己到底用了哪些插件，一方面也把插件的配置粘过来，总之，方便自己在任何地方、任何电脑上，也能够享受统一的插件服务。"></a>平时用到的一些插件不算多，但数数也有十几个了。不做总结的话，估计换台电脑我又得重新找回来，这里对这些插件做一个总结。一方面清楚自己到底用了哪些插件，一方面也把插件的配置粘过来，总之，方便自己在任何地方、任何电脑上，也能够享受统一的插件服务。</h4><a id="more"></a>
<h5 id="插件数目："><a href="#插件数目：" class="headerlink" title="插件数目："></a>插件数目：</h5><ul>
<li>Alignment</li>
<li>BracketHighlight</li>
<li>DocBlockr</li>
<li>Emmet</li>
<li>JsFormat</li>
<li>mardowmEditing</li>
<li>side bar</li>
<li>Trailing Spaces</li>
<li>Autoprefixer</li>
<li>ConvertToUTF8</li>
<li>LiveReload</li>
<li>ColorPicker</li>
<li>OnmimarkupPreviewer<h5 id="aligment"><a href="#aligment" class="headerlink" title="aligment"></a>aligment</h5></li>
<li>快捷键一般为“crtl+shift+a”;它可以将等号两边的代码对齐。很少用到！<h5 id="BracketHighlight"><a href="#BracketHighlight" class="headerlink" title="BracketHighlight"></a>BracketHighlight</h5></li>
<li>可以将代码高亮。当代码较多，嵌套比较复杂的时候，它可以显示<code>[]</code>、<code>&quot;&quot;</code>、<code>&#39;&#39;</code>、<code>{}</code>等等标签的闭合，也可以显示<code>html</code>标签的闭合。</li>
<li>配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">// Define region highlight styles</div><div class="line">&quot;bracket_styles&quot;: &#123;</div><div class="line">    // &quot;default&quot; and &quot;unmatched&quot; styles are special</div><div class="line">    // styles. If they are not defined here,</div><div class="line">    // they will be generated internally with</div><div class="line">    // internal defaults.</div><div class="line"></div><div class="line">    // &quot;default&quot; style defines attributes that</div><div class="line">    // will be used for any style that does not</div><div class="line">    // explicitly define that attribute.  So if</div><div class="line">    // a style does not define a color, it will</div><div class="line">    // use the color from the &quot;default&quot; style.</div><div class="line">    &quot;default&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;dot&quot;,</div><div class="line">        // BH1&apos;s original default color for reference</div><div class="line">        // &quot;color&quot;: &quot;entity.name.class&quot;,</div><div class="line">        &quot;color&quot;: &quot;brackethighlighter.default&quot;,</div><div class="line">        &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // This particular style is used to highlight</div><div class="line">    // unmatched bracket pairs.  It is a special</div><div class="line">    // style.</div><div class="line">    &quot;unmatched&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;question&quot;,</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.unmatched&quot;,</div><div class="line">        &quot;style&quot;: &quot;outline&quot;</div><div class="line">    &#125;,</div><div class="line">    // User defined region styles</div><div class="line">    &quot;curly&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;curly_bracket&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.curly&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;round&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;round_bracket&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.round&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;square&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;square_bracket&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.square&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;angle&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;angle_bracket&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.angle&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;tag&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;tag&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.tag&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;c_define&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;hash&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.c_define&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;single_quote&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;single_quote&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;double_quote&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;double_quote&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;regex&quot;: &#123;</div><div class="line">        &quot;icon&quot;: &quot;regex&quot;</div><div class="line">        // &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</div><div class="line">        // &quot;style&quot;: &quot;underline&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从599行开始，由于默认是注释状态，只需要接触注释状态即可。</p>
<h5 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a>DocBlockr</h5><ul>
<li>用作注释用。在JS中特别需要注释，现在脚本、样式的注释都形成了一般规范。注意以下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 这里的注释内容【会】被压缩工具压缩</div><div class="line"> */</div><div class="line"></div><div class="line">/*！</div><div class="line"> * 这里的注释内容【不会】被压缩工具压缩</div><div class="line"> * 与上面一个注释块不同的是，第2个*换成了!</div><div class="line"> */</div></pre></td></tr></table></figure>
</li>
</ul>
<p>关于这些关键信息，都有一些关键词和一定的格式来书写。关键词书写格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author ydr.me</div><div class="line"> * @version 1.0</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p><em>使用<code>@key desc</code>格式来书写，常用的关键词有:</em></p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@author</td>
<td>作者</td>
</tr>
<tr>
<td>@param</td>
<td>参数</td>
</tr>
<tr>
<td>@example</td>
<td>示例</td>
</tr>
<tr>
<td>@link</td>
<td>链接</td>
</tr>
<tr>
<td>@namespace</td>
<td>命名空间</td>
</tr>
<tr>
<td>@requires</td>
<td>依赖模块</td>
</tr>
<tr>
<td>@return</td>
<td>返回值</td>
</tr>
<tr>
<td>@version</td>
<td>版本号</td>
</tr>
</tbody>
</table>
<ul>
<li>插件的使用方式<br>  A.写好自己的函数; B.然后在函数的前面一行，输入; C.回车即可。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function(a, b, c) &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/**</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> + [description]</div><div class="line"> + @param  &#123;[type]&#125; a [description]</div><div class="line"> + @param  &#123;[type]&#125; b [description]</div><div class="line"> + @param  &#123;[type]&#125; c [description]</div><div class="line"> + @return &#123;[type]&#125;   [description]</div><div class="line"> */</div><div class="line">function(a, b, c) &#123;&#125;</div></pre></td></tr></table></figure>
<h5 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h5><ul>
<li>Emmet十分强大，运用的好可以大幅度提升码字速度。可以参看这个网站，<a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="external">这里</a>。详细列出Emmet的快捷键。</li>
</ul>
<h5 id="JsFormat"><a href="#JsFormat" class="headerlink" title="JsFormat"></a>JsFormat</h5><ul>
<li>快捷键为<code>ctrl+shift+f</code>，它的作用是将压缩过的<code>js</code>代码按照一定的格式还原</li>
</ul>
<h5 id="markdownEditing"><a href="#markdownEditing" class="headerlink" title="markdownEditing"></a>markdownEditing</h5><ul>
<li>编辑<code>markdown</code>文件</li>
</ul>
<h5 id="side-bar"><a href="#side-bar" class="headerlink" title="side bar"></a>side bar</h5><ul>
<li>扩展右键功能</li>
</ul>
<h5 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a>Trailing Spaces</h5><ul>
<li>它的功能主要是显示多余的空格，默认以红色显示。但是通过<code>package control</code>安装的插件，没有删除的快捷键。我们可以新建一个文件名和后缀名的文件:<code>Default (Windows).sublime-keymap</code>，然后放置在<code>sublime &gt;&gt; Preferences &gt;&gt; Browse packages &gt;&gt; User</code>里即可。配置文件为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123; &quot;keys&quot;: [&quot;ctrl+alt+d&quot;], &quot;command&quot;: &quot;delete_trailing_spaces&quot; &#125;,</div><div class="line"> </div><div class="line">    &#123; &quot;keys&quot;: [&quot;ctrl+alt+o&quot;], &quot;command&quot;: &quot;toggle_trailing_spaces&quot; &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a>Autoprefixer</h5><ul>
<li>自动补齐工具。一般在CSS中补齐一些私有前缀。</li>
</ul>
<h5 id="ConvertToUTF8"><a href="#ConvertToUTF8" class="headerlink" title="ConvertToUTF8"></a>ConvertToUTF8</h5><ul>
<li>说老实话，现在编写的页面都是<code>utf-8</code>编码，我现在所处的公司居然都是<code>gbk2312</code>编码，动不动就会生成乱码，哭死。不得已下了这么个插件，纯粹多余。</li>
</ul>
<h5 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h5><ul>
<li>这个插件在调试CSS时，会即时显示在浏览器中。不过我现在用<code>browser-sync</code>，一个npm包，好用多了。</li>
</ul>
<h5 id="colorPicker"><a href="#colorPicker" class="headerlink" title="colorPicker"></a>colorPicker</h5><ul>
<li>最常用的一个插件啦！不过说实话，很多情况下，条用这个插件会导致程序运行失败。电脑都卡顿了，不知道什么原因。不过，对于目标我的工作，用处还是挺大的。因为我一般一情况下都没有设计稿给我还原，只好猜颜色了。这个所见即所得的颜色还是很方便的。</li>
</ul>
<h5 id="OnmiMarkupPreviewer"><a href="#OnmiMarkupPreviewer" class="headerlink" title="OnmiMarkupPreviewer"></a>OnmiMarkupPreviewer</h5><ul>
<li>和前面的<code>markdownEditing</code>插件配合使用，可以配置参数，在统一局域网皆可打开。<br>配置参数为：<code>sublime &gt;&gt; Perferences &gt;&gt; OnmiMarkupPreviewer &gt;&gt; OmniMarkupPreviewer.sublime-settings</code>中第一项<code>&quot;server_host&quot;: &quot;192.168.1.98&quot;</code><br>改成自己的主机名就行。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery代码优化的12点]]></title>
      <url>http://yoursite.com/2016/10/28/jQuery%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%9A%8412%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="本人新手，既不擅长原生的js-对大名鼎鼎的jQuery也不甚了解。今天看到一篇名为《书写高质量jQuery代码的12条经验》，觉得里面内容实用。本篇文章根据内容提出的经验，一条一条的捋出来，让自己熟悉了解为止。"><a href="#本人新手，既不擅长原生的js-对大名鼎鼎的jQuery也不甚了解。今天看到一篇名为《书写高质量jQuery代码的12条经验》，觉得里面内容实用。本篇文章根据内容提出的经验，一条一条的捋出来，让自己熟悉了解为止。" class="headerlink" title="本人新手，既不擅长原生的js,对大名鼎鼎的jQuery也不甚了解。今天看到一篇名为《书写高质量jQuery代码的12条经验》，觉得里面内容实用。本篇文章根据内容提出的经验，一条一条的捋出来，让自己熟悉了解为止。"></a>本人新手，既不擅长原生的js,对大名鼎鼎的jQuery也不甚了解。今天看到一篇名为《书写高质量jQuery代码的12条经验》，觉得里面内容实用。本篇文章根据内容提出的经验，一条一条的捋出来，让自己熟悉了解为止。</h4><a id="more"></a>
<h4 id="正确引用jquery"><a href="#正确引用jquery" class="headerlink" title="正确引用jquery"></a>正确引用jquery</h4><ol>
<li>尽量在<code>body</code>结束前引入<code>jQuery</code>，而不是在<code>head</code>中；</li>
<li>借助第三方提供的<code>CDN</code>来引入<code>jQuery</code>，同时注意 当实用第三方<code>jQuery</code>出问题，再要引用本地的<code>jQuery</code>;</li>
<li>在<code>&lt;/body&gt;</code>前引入<code>&lt;script&gt;</code>文件的话，就不用写<code>document.ready</code>了，因为此时的<code>DOM</code>已加载完毕。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;//cdn.bootcss.com/jquery/3.1.1/core.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/***&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    $(&apos;#id&apos;).on(&apos;type&apos;,&apos;ele&apos;,function() &#123;</div><div class="line">    //todo</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="优化jQuery选择器"><a href="#优化jQuery选择器" class="headerlink" title="优化jQuery选择器"></a>优化jQuery选择器</h4><ul>
<li>高校正确的使用jQuery选择器是熟练使用jQuery的基础。在开始学习的时候就要注意jQuery选择器的使用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;nav&quot; id=&quot;nav&quot;&gt;</div><div class="line">    &lt;a herf=&quot;#&quot; class=&quot;home&quot;&gt;***&lt;/a&gt;</div><div class="line">    &lt;a herf=&quot;#&quot; class=&quot;categories&quot;&gt;***&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>性能优化比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;#nav&apos;).find(&apos;a.home&apos;) &gt; $(&apos;#nav a.home&apos;) &gt; $(&apos;.home&apos;)</div></pre></td></tr></table></figure></p>
<h5 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h5><ul>
<li>CSS解析引擎讲自右向左计算每一条规则</li>
</ul>
<h5 id="避免多个ID选择符"><a href="#避免多个ID选择符" class="headerlink" title="避免多个ID选择符"></a>避免多个ID选择符</h5><p>ID选择符要确保唯一。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//糟糕</div><div class="line">$(&apos;div#myid&apos;);</div><div class="line">$(&apos;div#footer a.myLink&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;#myid&apos;);</div><div class="line">$(&apos;#footer .myLink&apos;);</div></pre></td></tr></table></figure></p>
<p><strong>ID选择器应该是唯一的，不需要添加额外的选择符，更不需要多个后代ID选择符。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$(&apos;#outer #inner&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;#inner&apos;);</div></pre></td></tr></table></figure></p>
<h5 id="避免隐式通用选择符"><a href="#避免隐式通用选择符" class="headerlink" title="避免隐式通用选择符"></a>避免隐式通用选择符</h5><p>通用选择符有时是隐式的，不容易被发现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$(&apos;.someclass :radio&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;.someclass input:radio&apos;);</div></pre></td></tr></table></figure></p>
<h5 id="避免通用选择符"><a href="#避免通用选择符" class="headerlink" title="避免通用选择符"></a>避免通用选择符</h5><p>将通用选择符放到后代选择符中，性能非常糟糕。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$(&apos;.container &gt;　*&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;.container&apos;).children();</div></pre></td></tr></table></figure></p>
<h5 id="选择捷径"><a href="#选择捷径" class="headerlink" title="选择捷径"></a>选择捷径</h5><p>精简代码的其中一种方式是利用编码捷径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">if(collection.length &gt; 0) &#123;...&#125; //此处长度为零布尔值为false，这是布尔值的隐式转换</div><div class="line"></div><div class="line">//better</div><div class="line">if(collection.length) &#123;...&#125;;</div></pre></td></tr></table></figure></p>
<h5 id="还可以为选择器指定上下文"><a href="#还可以为选择器指定上下文" class="headerlink" title="还可以为选择器指定上下文"></a>还可以为选择器指定上下文</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$(&apos;.class&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;.class&apos;, &apos;#id&apos;);</div></pre></td></tr></table></figure>
<p>jQuery性能比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;.class&apos;,&apos;#id&apos;) &gt; $(&apos;#id .class&apos;) &gt; $(&apos;.class&apos;)</div></pre></td></tr></table></figure></p>
<h4 id="缓存jQuery对象"><a href="#缓存jQuery对象" class="headerlink" title="缓存jQuery对象"></a>缓存jQuery对象</h4><p>缓存<code>jQuery</code>对象可以减少不必要的<code>DOM</code>查找。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">h=$(&apos;#id&apos;).height();</div><div class="line">$(&apos;#id&apos;).css(&apos;height`,h-20);</div><div class="line"></div><div class="line">//better</div><div class="line">var $id = $(&apos;$id&apos;);</div><div class="line">var h = $id.height();</div><div class="line">$id.css(&apos;height&apos;,h-20);</div></pre></td></tr></table></figure></p>
<h5 id="使用子查询缓存的父元素"><a href="#使用子查询缓存的父元素" class="headerlink" title="使用子查询缓存的父元素"></a>使用子查询缓存的父元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$container=$(&apos;#container&apos;);</div><div class="line">$containerLi=$(&apos;#container li&apos;);</div><div class="line">$containerLiSpan=$(&apos;#container li span&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">var $container=$(&apos;#container&apos;),</div><div class="line">    $containerLi=$container.find(&apos;li&apos;),</div><div class="line">    $containerLiSpan=$containerLi.find(&apos;span&apos;);</div></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="避免全局变量"><a href="#避免全局变量" class="headerlink" title="避免全局变量"></a>避免全局变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$el=$(&apos;#elements&apos;);</div><div class="line">h=$el.height();</div><div class="line">$el.css(&apos;height&apos;,h-20);</div><div class="line"></div><div class="line">//better</div><div class="line">var $el=$(&apos;#elements&apos;);</div><div class="line">var h=$el.height();</div><div class="line">$el.css(&apos;height&apos;,h-20);</div></pre></td></tr></table></figure>
<h5 id="在jQuery前添加-便于识别jQuery对象"><a href="#在jQuery前添加-便于识别jQuery对象" class="headerlink" title="在jQuery前添加$,便于识别jQuery对象"></a>在jQuery前添加$,便于识别jQuery对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">var first=$(&apos;#first&apos;);</div><div class="line">var second=$(&apos;#second&apos;);</div><div class="line">var value=$first.val();</div><div class="line"></div><div class="line">//better</div><div class="line">var $first=$(&apos;#first&apos;);</div><div class="line">var $second=$(&apos;#second&apos;);</div><div class="line">var value=$first.val();</div></pre></td></tr></table></figure>
<h5 id="使用var链（单var模式）"><a href="#使用var链（单var模式）" class="headerlink" title="使用var链（单var模式）"></a>使用var链（单var模式）</h5><p>将多条<code>var</code>语句合并为一条语句，并讲未赋值的变量放在后面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var $first=$(&apos;#first&apos;),</div><div class="line">    $second=$(&apos;#second&apos;),</div><div class="line">    value=$first.val(),</div><div class="line">    k=3,</div><div class="line">    cookitestring=&apos;####$$%%$&apos;,</div><div class="line">    i,</div><div class="line">    j,</div><div class="line">    myArray=[];</div></pre></td></tr></table></figure></p>
<h4 id="正确使用事件委托"><a href="#正确使用事件委托" class="headerlink" title="正确使用事件委托"></a>正确使用事件委托</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;table id=&apos;t&apos;&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;我是单元格&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<p>如果我们要给上面的单元格绑定一个事件，比较差的做法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;#t&apos;).find(&apos;td&apos;).on(&apos;click&apos;, function() &#123;</div><div class="line">    $(this).css(&#123;&apos;color&apos; : &apos;#f00&apos;, &apos;background&apos; : &apos;#0f0&apos;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>好的做法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;#t&apos;).on(&apos;click&apos;, &apos;td&apos;, function() &#123;</div><div class="line">    $(this).css(&#123;&apos;color&apos; : &apos;red&apos;, &apos;background&apos; : &apos;#0f0&apos;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="精简jQuery代码"><a href="#精简jQuery代码" class="headerlink" title="精简jQuery代码"></a>精简jQuery代码</h4><h5 id="合并函数"><a href="#合并函数" class="headerlink" title="合并函数"></a>合并函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$(&apos;#first&apos;).click(function() &#123;</div><div class="line">    $(this).css(&apos;border&apos;, &apos;1px solid #f00&apos;);</div><div class="line">    $(this).css(&apos;color&apos; , &apos;blue&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;#first&apos;).click(function() &#123;</div><div class="line">    $(this).css(&#123;</div><div class="line">        &apos;border&apos; : &apos;1px solid #foo&apos;,</div><div class="line">        &apos;color&apos; : &apos;blue&apos;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">$second.html(value);</div><div class="line">$second.on(&apos;click&apos;, function() &#123;</div><div class="line">    alert(&apos;hello everybody&apos;);</div><div class="line">&#125;);</div><div class="line">$second.fadeIn(&apos;slow&apos;);</div><div class="line">$second.animate(&#123;height : &apos;120px&apos;&#125;, 500);</div><div class="line"></div><div class="line">//better</div><div class="line">$second.html(value);</div><div class="line">$second.on(&apos;click&apos;, function() &#123;</div><div class="line">    alert(&apos;hello everybody&apos;);</div><div class="line">&#125;).fadeIn(&apos;slow&apos;).animate(&#123;height : &apos;120px&apos;&#125;, 500);</div></pre></td></tr></table></figure>
<h4 id="减少DOM操作"><a href="#减少DOM操作" class="headerlink" title="减少DOM操作"></a>减少<code>DOM</code>操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">var $t=$(&apos;body&apos;);</div><div class="line">$t.append(&apos;&lt;table&gt;&apos;);</div><div class="line">$t.append(&apos;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&apos;);</div><div class="line">$t.append(&apos;&lt;/table&gt;&apos;);</div><div class="line"></div><div class="line">//better</div><div class="line">$(&apos;body&apos;).append(&apos;&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&apos;);</div></pre></td></tr></table></figure>
<h5 id="繁重的操作中分离元素"><a href="#繁重的操作中分离元素" class="headerlink" title="繁重的操作中分离元素"></a>繁重的操作中分离元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">var $container=$&apos;#container&apos;),</div><div class="line">    $contaienrLi=$(&apos;#container li&apos;);</div><div class="line">    $el=$containerLi.first();</div><div class="line">    //todo</div><div class="line">    </div><div class="line">//better</div><div class="line">var $container=$(&apos;#container&apos;),</div><div class="line">    $containerLi=$container.find(&apos;li&apos;),</div><div class="line">    $el=$containerLi.first().detach();</div><div class="line">    //todo</div><div class="line">$container.append($el);</div></pre></td></tr></table></figure>
<h5 id="最小化DOM更新"><a href="#最小化DOM更新" class="headerlink" title="最小化DOM更新"></a>最小化<code>DOM</code>更新</h5><p>重布局和重绘是WEB页面中最常见的也是最昂贵的两种操作。</p>
<ul>
<li>当改变样式时，而不改变页面几何布局时，将会发生重绘；</li>
<li>隐藏一个元素或者改变一个元素的背景色时都将导致一次重绘；</li>
<li>当对页面结构进行更新时，将导致页面重布局。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//bad</div><div class="line">for(var i=0; i &lt; 10000; i++) &#123;</div><div class="line">    $(&apos;#main table&apos;).append(&apos;&lt;tr&gt;&lt;td&gt;aaa&lt;/td&gt;&lt;tr&gt;&apos;);</div><div class="line">&#125;</div><div class="line">//better</div><div class="line">var tablerow=&quot;&quot;;</div><div class="line">for(var i=0; i &lt; 10000; i++) &#123; </div><div class="line">    tablerow += &apos;&lt;tr&gt;&lt;td&gt;aaa&lt;/td&gt;&lt;/tr&gt;&apos;;</div><div class="line">    &#125;</div><div class="line">$(&apos;#main table&apos;).append(tablerow);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="维持代码的可读性"><a href="#维持代码的可读性" class="headerlink" title="维持代码的可读性"></a>维持代码的可读性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$second.html(value);</div><div class="line">$second.on(&apos;click&apos;, function() &#123;</div><div class="line">    alert(&apos;hello everybody&apos;);</div><div class="line">&#125;).fadeIn(&apos;slow&apos;).animate(&#123;height : &apos;120px&apos;&#125;, 500);</div><div class="line"></div><div class="line">//better</div><div class="line">$second.html(value);</div><div class="line">$second</div><div class="line">    .on(&apos;click&apos;, function() &#123;</div><div class="line">    alert(&apos;hello everybody&apos;);</div><div class="line">    &#125;)</div><div class="line">    .fadeIn(&apos;slow&apos;)</div><div class="line">    .animate(&#123;height : &apos;120px&apos;&#125;, 500);</div></pre></td></tr></table></figure>
<h4 id="选择短路求值"><a href="#选择短路求值" class="headerlink" title="选择短路求值"></a>选择短路求值</h4><h5 id="短路求值是一个从左到右求值的表达式，用-amp-amp-（逻辑与）或-（逻辑或）操作符。"><a href="#短路求值是一个从左到右求值的表达式，用-amp-amp-（逻辑与）或-（逻辑或）操作符。" class="headerlink" title="短路求值是一个从左到右求值的表达式，用 &amp;&amp;（逻辑与）或 （逻辑或）操作符。"></a>短路求值是一个从左到右求值的表达式，用 &amp;&amp;（逻辑与）或 （逻辑或）操作符。</h5><h4 id="坚持最新版本"><a href="#坚持最新版本" class="headerlink" title="坚持最新版本"></a>坚持最新版本</h4><h4 id="记得能用原生函数实现就用原生函数实现"><a href="#记得能用原生函数实现就用原生函数实现" class="headerlink" title="记得能用原生函数实现就用原生函数实现"></a>记得能用原生函数实现就用原生函数实现</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ST3常用快捷键]]></title>
      <url>http://yoursite.com/2016/10/27/Text3%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h4 id="前一段时间用sublime-text3的时候感觉输入很慢，特别是有想法要实现的时候。今天抽空又在sublime-text3特地实践了一下下面这些快捷键。感觉良好。但这些操作还得继续使用才能记得牢，遂整理下来，待需要的时候还可以看看。"><a href="#前一段时间用sublime-text3的时候感觉输入很慢，特别是有想法要实现的时候。今天抽空又在sublime-text3特地实践了一下下面这些快捷键。感觉良好。但这些操作还得继续使用才能记得牢，遂整理下来，待需要的时候还可以看看。" class="headerlink" title="前一段时间用sublime text3的时候感觉输入很慢，特别是有想法要实现的时候。今天抽空又在sublime text3特地实践了一下下面这些快捷键。感觉良好。但这些操作还得继续使用才能记得牢，遂整理下来，待需要的时候还可以看看。"></a>前一段时间用sublime text3的时候感觉输入很慢，特别是有想法要实现的时候。今天抽空又在sublime text3特地实践了一下下面这些快捷键。感觉良好。但这些操作还得继续使用才能记得牢，遂整理下来，待需要的时候还可以看看。</h4><a id="more"></a>
<h4 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h4><ul>
<li><code>Ctrl+D</code> 选中光标所占的文本，继续操作则会选中下一个相同的文本。</li>
<li><code>Alt+F3</code> 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</li>
<li><code>Ctrl+L</code> 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</li>
<li><code>Ctrl+Shift+L</code> 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</li>
<li><code>Ctrl+Shift+M</code> 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</li>
<li><code>Ctrl+M</code> 光标移动至括号内结束或开始的位置。</li>
<li><code>Ctrl+Enter</code> 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</li>
<li><code>Ctrl+Shift+Enter</code> 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</li>
<li><code>Ctrl+Shift+[</code> 选中代码，按下快捷键，折叠代码。</li>
<li><code>Ctrl+Shift+]</code> 选中代码，按下快捷键，展开代码。</li>
<li><code>Ctrl+K+0</code> 展开所有折叠代码。</li>
<li><code>Ctrl+←</code> 向左单位性地移动光标，快速移动光标。</li>
<li><code>Ctrl+→</code> 向右单位性地移动光标，快速移动光标。</li>
<li><code>shift+↑</code> 向上选中多行。</li>
<li><code>shift+↓</code> 向下选中多行。</li>
<li><code>Shift+←</code> 向左选中文本。</li>
<li><code>Shift+→</code> 向右选中文本。</li>
<li><code>Ctrl+Shift+←</code> 向左单位性地选中文本。</li>
<li><code>Ctrl+Shift+→</code> 向右单位性地选中文本。</li>
<li><code>Ctrl+Shift+↑</code> 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</li>
<li><code>Ctrl+Shift+↓</code> 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</li>
<li><code>Ctrl+Alt+↑</code> 向上添加多行光标，可同时编辑多行。</li>
<li><code>Ctrl+Alt+↓</code> 向下添加多行光标，可同时编辑多行。</li>
</ul>
<h4 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h4><ul>
<li><code>Ctrl+J</code> 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</li>
<li><code>Ctrl+Shift+D</code>  复制光标所在整行，插入到下一行。</li>
<li><code>Tab</code> 向右缩进。</li>
<li><code>Shift+Tab</code> 向左缩进。</li>
<li><code>Ctrl+K+K</code> 从光标处开始删除代码至行尾。</li>
<li><code>Ctrl+Shift+K</code> 删除整行。</li>
<li><code>Ctrl+/</code> 注释单行。</li>
<li><code>Ctrl+Shift+/</code> 注释多行。</li>
<li><code>Ctrl+K+U</code> 转换大写。</li>
<li><code>Ctrl+K+L</code> 转换小写。</li>
<li><code>Ctrl+Z</code> 撤销。</li>
<li><code>Ctrl+Y</code> 恢复撤销。</li>
<li><code>Ctrl+U</code> 软撤销，感觉和 * Ctrl+Z 一样。</li>
<li><code>Ctrl+F2</code> 设置书签</li>
<li><code>Ctrl+T</code> 左右字母互换。</li>
<li><code>F6</code> 单词检测拼写</li>
</ul>
<h4 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h4><ul>
<li><code>Ctrl+F</code> 打开底部搜索框，查找关键字。</li>
<li><code>Ctrl+shift+F</code> 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</li>
<li><code>Ctrl+P</code> 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</li>
<li>Ctrl+G` 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</li>
<li><code>Ctrl+R</code> 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</li>
<li><code>Ctrl+：</code> 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</li>
<li><code>Ctrl+Shift+P</code> 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</li>
<li><code>Esc</code> 退出光标多行选择，退出搜索框，命令框等。</li>
</ul>
<h4 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h4><ul>
<li><code>Ctrl+Tab</code> 按文件浏览过的顺序，切换当前窗口的标签页。</li>
<li><code>Ctrl+PageDown</code> 向左切换当前窗口的标签页。</li>
<li><code>Ctrl+PageUp</code> 向右切换当前窗口的标签页。</li>
<li><code>Alt+Shift+1</code> 窗口分屏，恢复默认1屏（非小键盘的数字）</li>
<li><code>Alt+Shift+2</code> 左右分屏-2列</li>
<li><code>Alt+Shift+3</code> 左右分屏-3列</li>
<li><code>Alt+Shift+4</code> 左右分屏-4列</li>
<li><code>Alt+Shift+5</code> 等分4屏</li>
<li><code>Alt+Shift+8</code> 垂直分屏-2屏</li>
<li><code>Alt+Shift+9</code> 垂直分屏-3屏</li>
<li><code>Ctrl+K+B</code> 开启/关闭侧边栏。</li>
<li><code>F11</code> 全屏模式</li>
<li><code>Shift+F11</code> 免打扰模式</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[65条正则表达式]]></title>
      <url>http://yoursite.com/2016/10/20/65%E6%9D%A1%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。"><a href="#很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。" class="headerlink" title="很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。"></a>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</h4><a id="more"></a>
<h3 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h3><ol>
<li>数字：<code>^[0-9]*$</code></li>
<li>n位的数字：<code>^\d{n}$</code></li>
<li>至少n位的数字：<code>^\d{n,}$</code></li>
<li>m-n位的数字：<code>^\d{m,n}$</code></li>
<li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li>
<li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></li>
<li>带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></li>
<li>正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></li>
<li>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></li>
<li>非零的正整数：<code>^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$</code></li>
<li>非零的负整数：<code>^-[1-9][]0-9&quot;$ 或 ^-[1-9]\d$</code></li>
<li>非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></li>
<li>非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></li>
<li>非负浮点数：<code>^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$</code></li>
<li>非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$</code></li>
<li>正浮点数：<code>^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></li>
<li>负浮点数：<code>^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></li>
<li>浮点数：<code>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</code></li>
</ol>
<hr>
<h3 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h3><ol>
<li>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></li>
<li>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></li>
<li>长度为3-20的所有字符：<code>^.{3,20}$</code></li>
<li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li>
<li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li>
<li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li>
<li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li>
<li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></li>
<li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li>
<li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code></li>
<li>禁止输入含有~的字符：<code>[^~\x22]+</code></li>
</ol>
<hr>
<h3 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h3><ol>
<li>Email地址：<code>^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</code></li>
<li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li>
<li>InternetURL：<code>[a-zA-z]+://[^\s] 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</code></li>
<li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li>
<li>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li>
<li>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></li>
<li>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$</code></li>
<li>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></li>
<li>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></li>
<li>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li>
<li>钱的输入格式：<ol>
<li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li>
<li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code><br><strong><strong>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</strong></strong></li>
</ol>
</li>
<li>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></li>
<li>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li>
<li>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：<code>\n\s*\r (可以用来删除空白行)</code></li>
<li>HTML标记的正则表达式：<code>&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li>
<li>首尾空白字符的正则表达式：<code>^\s|\s$或(^\s)|(\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</li>
<li>IP地址：<code>\d+.\d+.\d+.\d+</code> (提取IP地址时有用)</li>
<li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[重新认识background]]></title>
      <url>http://yoursite.com/2016/10/19/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86background/</url>
      <content type="html"><![CDATA[<h4 id="自从学习前端以来，一直在加紧学习新的知识点，没有很深入的学习一个点。今天又接触background这个属性的时候，才发现很多内容都没有掌握好。趁此机会，再来温习一下！"><a href="#自从学习前端以来，一直在加紧学习新的知识点，没有很深入的学习一个点。今天又接触background这个属性的时候，才发现很多内容都没有掌握好。趁此机会，再来温习一下！" class="headerlink" title="自从学习前端以来，一直在加紧学习新的知识点，没有很深入的学习一个点。今天又接触background这个属性的时候，才发现很多内容都没有掌握好。趁此机会，再来温习一下！"></a>自从学习前端以来，一直在加紧学习新的知识点，没有很深入的学习一个点。今天又接触<code>background</code>这个属性的时候，才发现很多内容都没有掌握好。趁此机会，再来温习一下！</h4><a id="more"></a>
<p>background属性包括有<code>background-color</code> background-image<code>`background-repeat</code> background-position<code>`background-size</code> background-origin<code>`background-clip</code> <code>background-attachment</code> 八个属性。</p>
<hr>
<h4 id="background-color最简单，这里就不再做过多的叙述。"><a href="#background-color最简单，这里就不再做过多的叙述。" class="headerlink" title="background-color最简单，这里就不再做过多的叙述。"></a><code>background-color</code>最简单，这里就不再做过多的叙述。</h4><hr>
<h4 id="background-image-有三个参数。"><a href="#background-image-有三个参数。" class="headerlink" title="background-image 有三个参数。"></a><code>background-image</code> 有三个参数。</h4><h2 id="分别是url，里面是图片的引用地址，无须使用引号括起来。第二个参数是none，不使用背景图片。第三个参数是inherit。"><a href="#分别是url，里面是图片的引用地址，无须使用引号括起来。第二个参数是none，不使用背景图片。第三个参数是inherit。" class="headerlink" title="* 分别是url，里面是图片的引用地址，无须使用引号括起来。第二个参数是none，不使用背景图片。第三个参数是inherit。"></a>* 分别是url，里面是图片的引用地址，无须使用引号括起来。第二个参数是none，不使用背景图片。第三个参数是inherit。</h2><h4 id="background-repeat-有五个参数。"><a href="#background-repeat-有五个参数。" class="headerlink" title="background-repeat 有五个参数。"></a><code>background-repeat</code> 有五个参数。</h4><ul>
<li>分别是<code>repeat</code>，背景图片从垂直和水平方向重复。<code>repeat-x</code>背景从水平方向重复。<code>repeat-y</code>背景从垂直方面重复。<code>no-repeat</code>背景不重复。<code>inherit</code>继承父元素的<code>background-repeat</code>属性。<h5 id="background-position-有一个值，但是这个值有三种表述方式。"><a href="#background-position-有一个值，但是这个值有三种表述方式。" class="headerlink" title="background-position 有一个值，但是这个值有三种表述方式。"></a><code>background-position</code> 有一个值，但是这个值有三种表述方式。</h5></li>
<li>分别是用方位来描述：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">top left</div><div class="line">top center</div><div class="line">top right</div><div class="line">center left</div><div class="line">center center</div><div class="line">center right</div><div class="line">bottom left</div><div class="line">bottom center</div><div class="line">bottom right;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果规定了一个值，那么第二个值默认为center;</p>
<ul>
<li>用<code>x% y%</code>表示，第一个值为水平值，第二个值为垂直值。左上角为<code>0 0</code>,右下角为<code>100% 100%</code>，如果第二个值未设置，那么默认为50%；</li>
<li>用<code>xpos ypos</code>表示，第一个值为水平值，第二个值为垂直值。第一个值是水平位置，第二个值是垂直位置。左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。如果您仅规定了一个值，另一个值将是50%。<br><strong>也可以混合使用 % 和 position 值。</strong></li>
</ul>
<hr>
<h4 id="background-size-有一个值，这个值有四种表述方式。"><a href="#background-size-有一个值，这个值有四种表述方式。" class="headerlink" title="background-size 有一个值，这个值有四种表述方式。"></a><code>background-size</code> 有一个值，这个值有四种表述方式。</h4><ul>
<li><code>length</code> 设置背景图片的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li>
<li><code>percentage</code> 以父元素的百分比来设置背景图像的宽度和高度。<br>第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li>
<li><code>cover</code> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</li>
<li><code>contain</code> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。<strong>cover的区别是不管背景图片的宽高，只要方法的图片覆盖即可;而contain是根据图片宽高来设置，只要图片的宽高任意一个属性碰到边框即可。</strong></li>
</ul>
<hr>
<h4 id="background-origin-规定背景图片的定位。它有三个属性。"><a href="#background-origin-规定背景图片的定位。它有三个属性。" class="headerlink" title="background-origin 规定背景图片的定位。它有三个属性。"></a><code>background-origin</code> 规定背景图片的定位。它有三个属性。</h4><ul>
<li><code>padding-box</code> 背景图片相对于内边距框来定位；</li>
<li><code>content-box</code> 背景图片相对于内容来定位；</li>
<li><code>border-box</code> 背景图片相对于边框来定位。<br><strong>这些属性值和CSS3中的box-sizing很相似</strong></li>
</ul>
<hr>
<h4 id="background-clip-规定背景的剪裁区域。属性同上。"><a href="#background-clip-规定背景的剪裁区域。属性同上。" class="headerlink" title="background-clip 规定背景的剪裁区域。属性同上。"></a><code>background-clip</code> 规定背景的剪裁区域。属性同上。</h4><hr>
<h4 id="background-attachment规定背景是否随页面滚动还是固定在具体位置。"><a href="#background-attachment规定背景是否随页面滚动还是固定在具体位置。" class="headerlink" title="background-attachment规定背景是否随页面滚动还是固定在具体位置。"></a><code>background-attachment</code>规定背景是否随页面滚动还是固定在具体位置。</h4><ul>
<li><code>scroll</code> 默认值。背景是否随着页面内容的滚动而滚动；</li>
<li><code>fixed</code> 背景固定。也就是说背景不随着页面内容的滚动而滚动；</li>
<li><code>inherit</code> 继承父元素的<code>background-attachment</code>值。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery-lazyload]]></title>
      <url>http://yoursite.com/2016/10/13/jquery-loadLazy/</url>
      <content type="html"><![CDATA[<h3 id="jQuery-lazyload的用法"><a href="#jQuery-lazyload的用法" class="headerlink" title="jQuery lazyload的用法"></a>jQuery lazyload的用法</h3><h4 id="插件描述：jQuery图片延迟加载插件jQuery-lazyload-使用延迟加载可提高网页下载速度。在某些情况下也能帮助减轻服务器负载。"><a href="#插件描述：jQuery图片延迟加载插件jQuery-lazyload-使用延迟加载可提高网页下载速度。在某些情况下也能帮助减轻服务器负载。" class="headerlink" title="插件描述：jQuery图片延迟加载插件jQuery.lazyload,使用延迟加载可提高网页下载速度。在某些情况下也能帮助减轻服务器负载。"></a>插件描述：jQuery图片延迟加载插件jQuery.lazyload,使用延迟加载可提高网页下载速度。在某些情况下也能帮助减轻服务器负载。</h4><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>引用jquery和jquery.lazyload.js到你的页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;jquery-XXX.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;jquery.loadlazy.js?XXX&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>html图片调用方法<br>为图片加入样式lazy图片路径引用方法用data-original<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div><div class="line">&lt;img class=&quot;lazy&quot; data-original=&quot;img/XXX.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>js初始化lazyload并设置图片显示方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    $(function()&#123;</div><div class="line">         $(&apos;img.lazy&apos;).lazyload(&#123;effect:&quot;fadeIn&quot;&#125;);</div><div class="line">     &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>如果想提前载入图片，可以使用threshold进行设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;img.lazy&apos;).lazyload(&#123;threshold:180&#125;);</div></pre></td></tr></table></figure></p>
<p>以上实例的含义是：在图片距离屏幕180px时提前载入。</p>
<hr>
<h4 id="它还有其他参数"><a href="#它还有其他参数" class="headerlink" title="它还有其他参数"></a>它还有其他参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(&apos;img.lazy&apos;).lazyload(&#123;</div><div class="line">    placeholder:&apos;img/grey.gif&apos;,//用图片提前占位</div><div class="line">    effect:&apos;fadeIn&apos;,//载入时使用何种效果</div><div class="line">    threshold:200,//提前开始下载。threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉</div><div class="line">    event:&apos;click&apos;,//事件触发时才下载。 event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…)。</div><div class="line">    container:$(&apos;#container&apos;)//对某容器中的图片实现效果。container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片。</div><div class="line">    failurelimit:10//图片排序混乱时failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[chrome的用法--持续收集]]></title>
      <url>http://yoursite.com/2016/10/08/chrome%E7%9A%84%E7%94%A8%E6%B3%95-%E6%8C%81%E7%BB%AD%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<h3 id="之前一直再用chrome调试代码，但今天看到一篇差不多是讲chrome的奇技淫巧。遂整理几个，以后再有，继续补充"><a href="#之前一直再用chrome调试代码，但今天看到一篇差不多是讲chrome的奇技淫巧。遂整理几个，以后再有，继续补充" class="headerlink" title="之前一直再用chrome调试代码，但今天看到一篇差不多是讲chrome的奇技淫巧。遂整理几个，以后再有，继续补充"></a>之前一直再用chrome调试代码，但今天看到一篇差不多是讲chrome的奇技淫巧。遂整理几个，以后再有，继续补充</h3><a id="more"></a>
<h4 id="选取DOM元素"><a href="#选取DOM元素" class="headerlink" title="选取DOM元素"></a>选取DOM元素</h4><p>在一个网页没有引入jQuery的情况下，在控制台里可以通过类似的方法选取DOM：<br>通过<code>$$(&#39;tagName&#39;)</code>或者<code>$$(&#39;.className&#39;)</code>来选择所有匹配规则的DOM元素。选择返回的是一个数组，可以通过数组的方法来访问其中的单个元素。</p>
<hr>
<h4 id="让chrome变成所见即所得的编辑器"><a href="#让chrome变成所见即所得的编辑器" class="headerlink" title="让chrome变成所见即所得的编辑器"></a>让chrome变成所见即所得的编辑器</h4><p>打开开发者控制台，输入<code>document.body.contentEditable=true</code>即可。</p>
<hr>
<h3 id="获取某个DOM元素绑定的事件"><a href="#获取某个DOM元素绑定的事件" class="headerlink" title="获取某个DOM元素绑定的事件"></a>获取某个DOM元素绑定的事件</h3><p>在调试的时候，有时需要知道某个元素上面绑定了上面出发事件，chrome可以让你轻松找到它们。<br><code>getEventListener($(&#39;selector&#39;))</code>方法以数组对象的形式返回某个元素绑定的所有事件。<br>要是你需要选择其中的某个事件，可以通过下面的方法来访问。<br><code>getEventsListener($(&#39;selector&#39;)).eventName[0].listener</code>或者是<code>getEventsListener($(&#39;#firstName&#39;)).click[0].listener</code></p>
<hr>
<h4 id="监测事件"><a href="#监测事件" class="headerlink" title="监测事件"></a>监测事件</h4><p>当你需要监视某个DOM出发的事件时，可以用一下方法：</p>
<ul>
<li><code>monitorEvents($(&#39;selector&#39;))</code>会监测某个元素上绑定的所有事件，一旦该元素的某个事件触发，就会在控制台显示出来。</li>
<li><code>monitorEvents($(&#39;selector&#39;),&#39;eventName&#39;)</code>监听某个元素上绑定的具体事件。</li>
<li><code>monitorEvents($(&#39;selector&#39;),[&#39;eventName1&#39;,&#39;eventName2&#39;,...])</code>监听某个元素上绑定的相应事件。</li>
</ul>
<hr>
<h4 id="用计时器来获取某段代码块的运行时间"><a href="#用计时器来获取某段代码块的运行时间" class="headerlink" title="用计时器来获取某段代码块的运行时间"></a>用计时器来获取某段代码块的运行时间</h4><p>通过<code>console.time(&#39;labelName&#39;)</code>和<code>console.timeEnd(&#39;labelName&#39;)</code>即可得到相应代码运行的时间。</p>
<hr>
<h4 id="以表格形式输出数组"><a href="#以表格形式输出数组" class="headerlink" title="以表格形式输出数组"></a>以表格形式输出数组</h4><p>如果我们有这样一个数组：<code>var myArray=[{a:1,b:2,c:3},{a:1,b:2,c:3,d:4},{k:11,f:22},{a:1,b:2,c:3}]</code>,恰好我们需要以一种表格的形式输出，可以使用<code>console.tabel(variableName)</code>来获取。</p>
<hr>
<h4 id="通过控制台方法监测元素"><a href="#通过控制台方法监测元素" class="headerlink" title="通过控制台方法监测元素"></a>通过控制台方法监测元素</h4><ul>
<li><code>inspect($(&#39;selector&#39;))</code>会检查所有匹配选择器的DOM元素，并返回所有选择器选择的DOM对象。例如<code>inspect($(&#39;#firstName&#39;))</code>选择所有ID是firstName的元素，<code>inspect($(&#39;a&#39;)[3])</code>检测并返回页面上第四个p元素。</li>
<li><code>$0</code>,<code>$1</code>…返回你最近检查过的几个元素，例如<code>$0</code>回返回你最后检查的元素，<code>$1</code>则返回倒数第二个。</li>
</ul>
<hr>
<h4 id="列出某个元素的所有属性"><a href="#列出某个元素的所有属性" class="headerlink" title="列出某个元素的所有属性"></a>列出某个元素的所有属性</h4><p><code>dir($(&#39;selector&#39;))</code>会返回匹配选择器的DOM元素的所有属性。</p>
<hr>
<h4 id="获取最后计算结果的值"><a href="#获取最后计算结果的值" class="headerlink" title="获取最后计算结果的值"></a>获取最后计算结果的值</h4><p>通过<code>$_</code>来获取最后的计算结果值。</p>
<hr>
<h4 id="清空控制台输出"><a href="#清空控制台输出" class="headerlink" title="清空控制台输出"></a>清空控制台输出</h4><ul>
<li>clear()</li>
<li>window–ctrl+l</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS十种排序算法（未完成）]]></title>
      <url>http://yoursite.com/2016/09/29/JS%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E6%9C%AA%E5%AE%8C%E6%88%90%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="参考网上的教程打算把JS的十种排序算法搞清楚，奈何实在太难。看到第五种手指头就已经脱离键盘了。"><a href="#参考网上的教程打算把JS的十种排序算法搞清楚，奈何实在太难。看到第五种手指头就已经脱离键盘了。" class="headerlink" title="参考网上的教程打算把JS的十种排序算法搞清楚，奈何实在太难。看到第五种手指头就已经脱离键盘了。"></a>参考网上的教程打算把JS的十种排序算法搞清楚，奈何实在太难。看到第五种手指头就已经脱离键盘了。</h3><a id="more"></a>
<ul>
<li><p>冒泡排序 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function bubbleSort(arr) &#123;</div><div class="line">	var len = arr.length;</div><div class="line">	for (var i=0; i &lt; len; i++) &#123;</div><div class="line">		for (var j=0; j &lt; len - 1 - i; j++) &#123;</div><div class="line">			if (arr[j] &gt; arr[j+1]) &#123;</div><div class="line">				var temp = arr[j+1];</div><div class="line">				arr[j+1] = arr[j];</div><div class="line">				arr[j] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>改进后的冒泡排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function bubbleSort2(arr) &#123;</div><div class="line">	var i = arr.length - 1;</div><div class="line">	while(i &gt; 0) &#123;</div><div class="line">		var pos = 0;</div><div class="line">		for (var j=0; j &lt; i; j++) &#123;</div><div class="line">			if (arr[j] &gt; arr[j+1]) &#123;</div><div class="line">				pos = j;</div><div class="line">				var temp = arr[j];</div><div class="line">				arr[j] = arr[j+1];</div><div class="line">				arr[j+1] = temp; </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		i = pos;</div><div class="line">	&#125;</div><div class="line">	return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正向反向查询-冒泡排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function bubbleSort3(arr) &#123;</div><div class="line">	var low = 0;</div><div class="line">	var high = arr.length - 1;</div><div class="line">	var temp, i;</div><div class="line">	while(low &lt; high) &#123;</div><div class="line">		for (j=low; j &lt; high; ++j)</div><div class="line">		if (arr[j] &gt; arr[j+1]) &#123;</div><div class="line">			temp = arr[j];</div><div class="line">			arr[j] = arr[j+1];</div><div class="line">			arr[j+1] = temp;</div><div class="line">		&#125;</div><div class="line">		--high;</div><div class="line"></div><div class="line">		for(j=high; j &gt; low; --j)</div><div class="line">			if (arr[j] &lt; arr[j-1]) &#123;</div><div class="line">				temp = arr[j];</div><div class="line">				arr[j] = arr[j-1];</div><div class="line">				arr[j-1] = arr[j];	</div><div class="line">			&#125;</div><div class="line">		++low;</div><div class="line">	&#125;</div><div class="line">	return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选择排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function selectionSort(arr) &#123;</div><div class="line">	var len = arr.length;</div><div class="line">	var minIndex, temp;</div><div class="line">	for(var i=0; i &lt; len - 1; i++) &#123;</div><div class="line">		minIndex = i;</div><div class="line">		for(var j=i + 1; j &lt; len; j++) &#123;</div><div class="line">			if (arr[j] &lt; arr[minIndex]) &#123;</div><div class="line">				minIndex = j;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		temp = arr[i];</div><div class="line">		arr[i] = arr[minIndex];</div><div class="line">		arr[minIndex] = temp;</div><div class="line">	&#125;</div><div class="line">	return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>插入排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function insertionSort(arr) &#123;</div><div class="line">	if (Object.prototype.toString.call(arr).slice(8,-1) === &quot;Array&quot;) &#123;</div><div class="line">		for(var i=1; i &lt; arr.length; i++) &#123;</div><div class="line">			var key = arr[i];</div><div class="line">			var j = i - 1;</div><div class="line">			while(j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123;</div><div class="line">				arr[j+1] = arr[j];</div><div class="line">				j--;</div><div class="line">			&#125;</div><div class="line">			arr[j+1] = key;</div><div class="line">		&#125;</div><div class="line">		return arr;</div><div class="line">	&#125; else &#123;</div><div class="line">		return &apos;arr is not an Array!&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(insertionSort(arr));</div></pre></td></tr></table></figure>
</li>
<li><p>用二分查找改进插入排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function insertionSort2(arr) &#123;</div><div class="line">	if (Object.prototype.toString.call(arr).slice(8,-1) === &quot;Array&quot;) &#123;</div><div class="line">		for(var i=1, len=arr.length; i &lt; len; i++) &#123;</div><div class="line">			var key = arr[i],</div><div class="line">				left = 0,</div><div class="line">				right = i - 1;</div><div class="line">				while(left &lt;= right) &#123;</div><div class="line">					var middle = parseInt((left + right) /2);</div><div class="line">					if (key &lt; arr[middle]) &#123;</div><div class="line">						right = middle - 1;</div><div class="line">					&#125; else &#123;</div><div class="line">						left = middle + 1;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				for(var j=i-1; j &gt; left; j--) &#123;</div><div class="line">					arr[j+1] = arr[j];</div><div class="line">				&#125;				</div><div class="line">				arr[left] = key;</div><div class="line">		&#125; </div><div class="line">		return arr;</div><div class="line">	&#125;else &#123;</div><div class="line">		return &apos;array si not an Array&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(insertionSort2(arr));</div></pre></td></tr></table></figure>
</li>
<li><p>希尔排序*(已经不懂什么意思)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var shellSort = function(arr) &#123;</div><div class="line">	var len = arr.length,</div><div class="line">		temp,</div><div class="line">		gap = 1;</div><div class="line">	while(gap &lt; (len / 5)) &#123;</div><div class="line">		gap = gap * 5 + 1;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for(gap; gap &gt; 0; gap = Math.floor(gap / 5)) &#123;</div><div class="line">		for(var i = gap; i &lt; len; i++) &#123;</div><div class="line">			temp = arr[i];</div><div class="line">			for(var j = i - gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</div><div class="line">				arr[j + gap] = arr[j];</div><div class="line">				/*console.log(i);</div><div class="line">				console.log(j);</div><div class="line">				console.log(j+gap);*/</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			arr[j + gap] = temp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(shellSort(arr));</div></pre></td></tr></table></figure>
</li>
<li><p>归并排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">function mergeSort(arr) &#123;</div><div class="line">	var len = arr.length;</div><div class="line">	if (len &lt; 2) &#123;</div><div class="line">		return arr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	var middle = Math.floor(len / 2),</div><div class="line">		left = arr.slice(0, middle),</div><div class="line">		right = arr.slice(middle);</div><div class="line">		return merge(mergeSort(left),mergeSort(right));</div><div class="line">&#125;</div><div class="line"></div><div class="line">function merge(left,right) &#123;</div><div class="line">	var result = [];</div><div class="line">	while(left.length &amp;&amp; right.length) &#123;</div><div class="line">		if (left[0] &lt;= right[0]) &#123;</div><div class="line">			result.push(left.shift());</div><div class="line">		&#125; else &#123;</div><div class="line">			result.push(right.shift());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	while(left.length) &#123;</div><div class="line">		result.push(left.shift());</div><div class="line">	&#125;</div><div class="line">	while(right.length) &#123;</div><div class="line">		result.push(right.shift());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(mergeSort(arr));</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(终于完成啦)]]></title>
      <url>http://yoursite.com/2016/09/28/%E7%BB%88%E4%BA%8E%E5%AE%8C%E6%88%90%E5%95%A6/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://yoursite.com/README.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="写些什么好呢？-2016-10-17"><a href="#写些什么好呢？-2016-10-17" class="headerlink" title="写些什么好呢？(2016-10-17)"></a>写些什么好呢？(2016-10-17)</h1><h1 id="本来这里应该是一篇自我介绍，但是自从毕业以来，就感觉完全否决了自己。看不起自己的现在状态，看不清楚未来，把握不住当下。一干二净、一贫如洗，虽然每天忙忙碌碌，奋力向上，但是所取得回报并没有让我感到一丝安慰。唉，这日子过的好艰难，有点心理憔悴…-2016-11-15"><a href="#本来这里应该是一篇自我介绍，但是自从毕业以来，就感觉完全否决了自己。看不起自己的现在状态，看不清楚未来，把握不住当下。一干二净、一贫如洗，虽然每天忙忙碌碌，奋力向上，但是所取得回报并没有让我感到一丝安慰。唉，这日子过的好艰难，有点心理憔悴…-2016-11-15" class="headerlink" title="本来这里应该是一篇自我介绍，但是自从毕业以来，就感觉完全否决了自己。看不起自己的现在状态，看不清楚未来，把握不住当下。一干二净、一贫如洗，虽然每天忙忙碌碌，奋力向上，但是所取得回报并没有让我感到一丝安慰。唉，这日子过的好艰难，有点心理憔悴…..(2016-11-15)"></a>本来这里应该是一篇自我介绍，但是自从毕业以来，就感觉完全否决了自己。看不起自己的现在状态，看不清楚未来，把握不住当下。一干二净、一贫如洗，虽然每天忙忙碌碌，奋力向上，但是所取得回报并没有让我感到一丝安慰。唉，这日子过的好艰难，有点心理憔悴…..(2016-11-15)</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
